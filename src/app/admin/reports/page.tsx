"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { getChargingReports } from "@/lib/payment-actions";
import { CheckCircle, XCircle, DollarSign, Users, TrendingUp, AlertTriangle, Download, RefreshCw, Upload } from "lucide-react";
import { useState, useEffect } from "react";
import { toast } from "@/hooks/use-toast";

interface ChargingReport {
  successfulPayments: any[];
  failedPayments: any[];
  statistics: {
    totalSuccessfulAmount: number;
    totalFailedAmount: number;
    totalMembersCharged: number;
    totalMembersFailed: number;
    successRate: number;
  };
  allPayments: any[];
}

export default function AdminReportsPage() {
  const [reports, setReports] = useState<ChargingReport | null>(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  const fetchReports = async () => {
    try {
      const data = await getChargingReports();
      setReports(data);
    } catch (error) {
      console.error('Error fetching reports:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to fetch reports. Please try again.",
      });
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  useEffect(() => {
    fetchReports();
  }, []);

  const handleRefresh = async () => {
    setRefreshing(true);
    await fetchReports();
    toast({
      title: "Reports Updated",
      description: "Charging reports have been refreshed with latest data.",
    });
  };

  const generateWordReport = () => {
    if (!reports) return;

    const { successfulPayments, failedPayments, statistics } = reports;
    
    // Create Word document content
    const content = `
Memorial Share Community - Charging Reports
Generated on: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}

SUMMARY STATISTICS
==================
Total Successful Charges: ${statistics.totalMembersCharged}
Total Failed Charges: ${statistics.totalMembersFailed}
Total Revenue Collected: $${statistics.totalSuccessfulAmount.toFixed(2)}
Total Revenue Lost: $${statistics.totalFailedAmount.toFixed(2)}
Success Rate: ${statistics.successRate.toFixed(1)}%

SUCCESSFUL CHARGES
==================
${successfulPayments.map((payment, index) => `
${index + 1}. ${payment.memberName} (${payment.memberEmail})
   Amount: $${payment.amount?.toFixed(2) || '0.00'}
   Shares: ${payment.shares || 1}
   Amount per Share: $${payment.amountPerShare?.toFixed(2) || '0.00'}
   Payment ID: ${payment.paymentIntentId || 'N/A'}
   Charged At: ${payment.chargedAt ? new Date(payment.chargedAt.seconds * 1000).toLocaleDateString() : 'N/A'}
   Status: Completed
`).join('')}

FAILED CHARGES
==============
${failedPayments.map((payment, index) => `
${index + 1}. ${payment.memberName} (${payment.memberEmail})
   Amount: $${payment.amount?.toFixed(2) || '0.00'}
   Shares: ${payment.shares || 1}
   Amount per Share: $${payment.amountPerShare?.toFixed(2) || '0.00'}
   Error: ${payment.error || 'Unknown error'}
   Attempted At: ${payment.chargedAt ? new Date(payment.chargedAt.seconds * 1000).toLocaleDateString() : 'N/A'}
   Status: Failed
`).join('')}

RECOMMENDATIONS
===============
${failedPayments.length > 0 ? `
Action Required: ${failedPayments.length} member(s) could not be charged.

Recommended actions:
- Contact members with failed payments to update their payment methods
- Verify payment method validity in Stripe dashboard
- Retry charging after payment method updates
- Consider alternative payment arrangements for persistent failures
` : 'No failed charges. All members were successfully charged.'}

---
Report generated by Memorial Share Community Admin Panel
    `.trim();

    // Create and download the file
    const blob = new Blob([content], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Memorial-Share-Charging-Report-${new Date().toISOString().split('T')[0]}.docx`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Charging report has been downloaded as a Word document.",
    });
  };

  if (loading) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <div className="flex-1 space-y-4 p-4 md:space-y-8 md:p-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Charging Reports</h1>
              <p className="text-muted-foreground">
                Detailed reports on member charging activities and payment status
              </p>
            </div>
          </div>
          <div className="flex items-center justify-center h-64">
            <RefreshCw className="h-8 w-8 animate-spin" />
            <span className="ml-2">Loading reports...</span>
          </div>
        </div>
      </div>
    );
  }

  if (!reports) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <div className="flex-1 space-y-4 p-4 md:space-y-8 md:p-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Charging Reports</h1>
              <p className="text-muted-foreground">
                Detailed reports on member charging activities and payment status
              </p>
            </div>
          </div>
          <div className="text-center py-8">
            <AlertTriangle className="h-12 w-12 mx-auto mb-4 text-red-600" />
            <p className="text-muted-foreground">Failed to load reports. Please try again.</p>
            <Button onClick={handleRefresh} className="mt-4">
              <RefreshCw className="h-4 w-4 mr-2" />
              Retry
            </Button>
          </div>
        </div>
      </div>
    );
  }

  const { successfulPayments, failedPayments, statistics } = reports;

  return (
    <div className="flex min-h-screen w-full flex-col">
      <div className="flex-1 space-y-4 p-4 md:space-y-8 md:p-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Charging Reports</h1>
            <p className="text-muted-foreground">
              Detailed reports on member charging activities and payment status
            </p>
          </div>
          <div className="flex gap-2">
            <Button 
              onClick={handleRefresh} 
              disabled={refreshing}
              variant="outline"
            >
              <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
              {refreshing ? 'Refreshing...' : 'Refresh'}
            </Button>
            <Button 
              onClick={generateWordReport}
              disabled={!reports || (statistics.totalMembersCharged === 0 && statistics.totalMembersFailed === 0)}
            >
              <Download className="h-4 w-4 mr-2" />
              Download Word Report
            </Button>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Successful Charges</CardTitle>
              <CheckCircle className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{statistics.totalMembersCharged}</div>
              <p className="text-xs text-muted-foreground">
                ${statistics.totalSuccessfulAmount.toFixed(2)} collected
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Failed Charges</CardTitle>
              <XCircle className="h-4 w-4 text-red-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{statistics.totalMembersFailed}</div>
              <p className="text-xs text-muted-foreground">
                ${statistics.totalFailedAmount.toFixed(2)} lost
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Success Rate</CardTitle>
              <TrendingUp className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{statistics.successRate.toFixed(1)}%</div>
              <p className="text-xs text-muted-foreground">
                Payment success rate
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
              <DollarSign className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">${statistics.totalSuccessfulAmount.toFixed(2)}</div>
              <p className="text-xs text-muted-foreground">
                From successful charges
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Successful Charges Table */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-600" />
              Successful Charges
            </CardTitle>
            <CardDescription>
              Members who were successfully charged for memorial contributions
            </CardDescription>
          </CardHeader>
          <CardContent>
            {successfulPayments.length > 0 ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Member Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Shares</TableHead>
                    <TableHead>Amount per Share</TableHead>
                    <TableHead>Payment ID</TableHead>
                    <TableHead>Charged At</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {successfulPayments.map((payment) => (
                    <TableRow key={payment.id}>
                      <TableCell className="font-medium">{payment.memberName}</TableCell>
                      <TableCell>{payment.memberEmail}</TableCell>
                      <TableCell>${payment.amount?.toFixed(2) || '0.00'}</TableCell>
                      <TableCell>{payment.shares || 1}</TableCell>
                      <TableCell>${payment.amountPerShare?.toFixed(2) || '0.00'}</TableCell>
                      <TableCell className="font-mono text-xs">
                        {payment.paymentIntentId?.slice(-8) || 'N/A'}
                      </TableCell>
                      <TableCell>
                        {payment.chargedAt ? 
                          new Date(payment.chargedAt.seconds * 1000).toLocaleDateString() : 
                          'N/A'
                        }
                      </TableCell>
                      <TableCell>
                        <Badge variant="default" className="bg-green-100 text-green-800">
                          Completed
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                <CheckCircle className="h-12 w-12 mx-auto mb-4 text-green-600" />
                <p>No successful charges recorded yet.</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Failed Charges Table */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <XCircle className="h-5 w-5 text-red-600" />
              Failed Charges
            </CardTitle>
            <CardDescription>
              Members who could not be charged and require attention
            </CardDescription>
          </CardHeader>
          <CardContent>
            {failedPayments.length > 0 ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Member Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Shares</TableHead>
                    <TableHead>Amount per Share</TableHead>
                    <TableHead>Error</TableHead>
                    <TableHead>Attempted At</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {failedPayments.map((payment) => (
                    <TableRow key={payment.id}>
                      <TableCell className="font-medium">{payment.memberName}</TableCell>
                      <TableCell>{payment.memberEmail}</TableCell>
                      <TableCell>${payment.amount?.toFixed(2) || '0.00'}</TableCell>
                      <TableCell>{payment.shares || 1}</TableCell>
                      <TableCell>${payment.amountPerShare?.toFixed(2) || '0.00'}</TableCell>
                      <TableCell className="text-red-600 text-sm">
                        {payment.error || 'Unknown error'}
                      </TableCell>
                      <TableCell>
                        {payment.chargedAt ? 
                          new Date(payment.chargedAt.seconds * 1000).toLocaleDateString() : 
                          'N/A'
                        }
                      </TableCell>
                      <TableCell>
                        <Badge variant="destructive">
                          Failed
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                <XCircle className="h-12 w-12 mx-auto mb-4 text-red-600" />
                <p>No failed charges recorded.</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Action Required Alert */}
        {failedPayments.length > 0 && (
          <Card className="border-red-200 bg-red-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-red-800">
                <AlertTriangle className="h-5 w-5" />
                Action Required
              </CardTitle>
              <CardDescription className="text-red-700">
                {failedPayments.length} member(s) could not be charged. Please review the failed charges above and take appropriate action.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-sm text-red-700">
                <p className="font-medium">Recommended actions:</p>
                <ul className="list-disc list-inside mt-2 space-y-1">
                  <li>Contact members with failed payments to update their payment methods</li>
                  <li>Verify payment method validity in Stripe dashboard</li>
                  <li>Retry charging after payment method updates</li>
                  <li>Consider alternative payment arrangements for persistent failures</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
