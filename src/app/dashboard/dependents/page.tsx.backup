"use client";

import { useState, useEffect } from "react";
import { Header } from "@/components/app/header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { useAuth } from "@/contexts/AuthContext";
import { getUserDependents } from "@/lib/firestore-service";
import { addDependentAction, deleteDependentAction } from "@/lib/dependent-actions";
import { PlusCircle, AlertTriangle, Loader2, Trash2 } from "lucide-react";

export default function UserDependentsPage() {
  const { user } = useAuth();
  const [dependents, setDependents] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [addingDependent, setAddingDependent] = useState(false);
  const [deletingId, setDeletingId] = useState<string | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);

  // Fetch user's dependents
  useEffect(() => {
    const fetchDependents = async () => {
      if (!user?.uid) return;
      
      try {
        setLoading(true);
        const userDependents = await getUserDependents(user.uid);
        setDependents(userDependents);
      } catch (error) {
        console.error('Error fetching dependents:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchDependents();
  }, [user?.uid]);

  const handleAddDependent = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!user?.uid) return;
    
    const formData = new FormData(event.currentTarget);
    
    try {
      setAddingDependent(true);
      const result = await addDependentAction(user.uid, formData);
      
      if (result.success) {
        // Refresh dependents list
        const userDependents = await getUserDependents(user.uid);
        setDependents(userDependents);
        // Reset form and close dialog
        if (event.currentTarget) {
          event.currentTarget.reset();
        }
        setDialogOpen(false);
      } else {
        alert(result.error || 'Failed to add dependent');
      }
    } catch (error) {
      console.error('Error adding dependent:', error);
      alert('Failed to add dependent');
    } finally {
      setAddingDependent(false);
    }
  };

  const handleDeleteDependent = async (dependentId: string) => {
    if (!confirm('Are you sure you want to delete this dependent?')) return;
    
    try {
      setDeletingId(dependentId);
      const result = await deleteDependentAction(dependentId);
      
      if (result.success) {
        // Refresh dependents list
        const userDependents = await getUserDependents(user!.uid);
        setDependents(userDependents);
      } else {
        alert(result.error || 'Failed to delete dependent');
      }
    } catch (error) {
      console.error('Error deleting dependent:', error);
      alert('Failed to delete dependent');
    } finally {
      setDeletingId(null);
    }
  };

  const formatDate = (timestamp: any) => {
    if (!timestamp) return 'N/A';
    
    // If it's already a formatted string from firestore-service
    if (typeof timestamp === 'string') {
      return timestamp;
    }
    
    // If it's a Firebase Timestamp object
    if (timestamp.toDate) {
      return timestamp.toDate().toLocaleDateString();
    }
    
    // If it's a regular Date or timestamp
    try {
      return new Date(timestamp).toLocaleDateString();
    } catch (error) {
      console.error('Error formatting date:', error, timestamp);
      return 'Invalid Date';
    }
  };

  return (
    <div className="flex min-h-screen w-full flex-col">
      <Header title="My Dependents" />
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8 bg-background">
        {/* Important Notice */}
        <Card className="border-orange-200 bg-orange-50">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <AlertTriangle className="h-5 w-5 text-orange-600 mt-0.5" />
              <div>
                <h3 className="font-semibold text-orange-900">Important Notice</h3>
                <p className="text-sm text-orange-800 mt-1">
                  Please note: As the Head of Household, you are responsible for the funeral shares of all your dependents. 
                  Each dependent is counted as a full member when calculating contributions.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <div>
              <CardTitle>My Dependents</CardTitle>
              <CardDescription>Manage your dependents linked to your account.</CardDescription>
            </div>
            <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
              <DialogTrigger asChild>
                <Button size="sm" className="gap-1">
                  <PlusCircle className="h-3.5 w-3.5" />
                  <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">Add Dependent</span>
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Add a New Dependent</DialogTitle>
                  <DialogDescription>
                    Dependents are considered full members under your payment method.
                  </DialogDescription>
                </DialogHeader>
                <form onSubmit={handleAddDependent}>
                <div className="grid gap-4 py-4">
                  <div className="grid gap-2">
                    <Label htmlFor="dependent-name">Dependent's Full Name</Label>
                      <Input 
                        id="dependent-name" 
                        name="name"
                        placeholder="Jane Doe" 
                        required
                      />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="relationship">Relationship</Label>
                      <Input 
                        id="relationship" 
                        name="relationship"
                        placeholder="Spouse, Son, Daughter..." 
                        required
                      />
                    </div>
                </div>
                <DialogFooter>
                    <Button type="submit" disabled={addingDependent}>
                      {addingDependent ? (
                        <>
                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          Adding...
                        </>
                      ) : (
                        'Add Dependent'
                      )}
                    </Button>
                </DialogFooter>
                </form>
              </DialogContent>
            </Dialog>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="flex items-center justify-center h-24">
                <Loader2 className="h-6 w-6 animate-spin" />
              </div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Dependent ID</TableHead>
                    <TableHead>Name</TableHead>
                    <TableHead>Relationship</TableHead>
                    <TableHead>Date Added</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {dependents.length > 0 ? (
                    dependents.map((dep) => (
                      <TableRow key={dep.id}>
                        <TableCell className="font-medium">{dep.id}</TableCell>
                        <TableCell>{dep.name}</TableCell>
                        <TableCell>{dep.relationship}</TableCell>
                        <TableCell>{formatDate(dep.addedDate)}</TableCell>
                        <TableCell>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleDeleteDependent(dep.id)}
                            disabled={deletingId === dep.id}
                          >
                            {deletingId === dep.id ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <Trash2 className="h-4 w-4" />
                            )}
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={5} className="text-center h-24">
                        You have not added any dependents.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            )}
          </CardContent>
        </Card>
      </main>
    </div>
  );
}

            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Dependent ID</TableHead>
                  <TableHead>Name</TableHead>
                  <TableHead>Relationship</TableHead>
                  <TableHead>Date Added</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {dependents.length > 0 ? (
                  dependents.map((dep) => (
                    <TableRow key={dep.id}>
                      <TableCell className="font-medium">{dep.id}</TableCell>
                      <TableCell>{dep.name}</TableCell>
                      <TableCell>{dep.relationship}</TableCell>
                      <TableCell>{dep.addedDate}</TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={4} className="text-center h-24">
                      You have not added any dependents.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
