'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Loader2, CreditCard, Download, Receipt, Calendar, DollarSign, CheckCircle, XCircle, AlertCircle } from 'lucide-react';
import { getMemberPaymentHistory } from '@/lib/payment-actions';
import { useToast } from '@/hooks/use-toast';

interface PaymentRecord {
  id: string;
  amount: number;
  shares: number;
  amountPerShare: number;
  date: string;
  type: string;
  status: string;
  paymentIntentId: string;
  error?: string;
}

export default function PaymentHistoryPage() {
  const { user, userProfile } = useAuth();
  const [payments, setPayments] = useState<PaymentRecord[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    if (user) {
      fetchPaymentHistory();
    }
  }, [user]);

  const fetchPaymentHistory = async () => {
    try {
      setLoading(true);
      console.log('User UID:', user?.uid);
      console.log('User Profile:', userProfile);
      const paymentHistory = await getMemberPaymentHistory(user?.uid || '');
      console.log('Payment history result:', paymentHistory);
      setPayments(paymentHistory);
    } catch (error) {
      console.error('Error fetching payment history:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to fetch payment history.",
      });
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch {
      return 'Invalid Date';
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return <Badge variant="default" className="bg-green-100 text-green-800">Completed</Badge>;
      case 'pending':
        return <Badge variant="secondary">Pending</Badge>;
      case 'failed':
        return <Badge variant="destructive">Failed</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const getTypeBadge = (type: string) => {
    switch (type) {
      case 'memorial_share':
        return <Badge variant="outline" className="bg-blue-50 text-blue-700">Memorial Share</Badge>;
      case 'sadqa_donation':
        return <Badge variant="outline" className="bg-purple-50 text-purple-700">Sadqa Donation</Badge>;
      default:
        return <Badge variant="outline">{type}</Badge>;
    }
  };

  const generateInvoice = (payment: PaymentRecord) => {
    const invoiceContent = `
Memorial Share Community - Invoice
================================

Invoice Details:
- Invoice ID: ${payment.paymentIntentId}
- Date: ${formatDate(payment.date)}
- Member: ${userProfile?.name || user?.email || 'Member'}
- Email: ${user?.email || 'N/A'}

Payment Details:
- Type: ${payment.type.replace('_', ' ').toUpperCase()}
- Amount: $${payment.amount.toFixed(2)}
- Shares: ${payment.shares}
- Amount per Share: $${payment.amountPerShare?.toFixed(2) || '0.00'}
- Status: ${payment.status.toUpperCase()}

${payment.status === 'failed' && payment.error ? `
Payment Error:
- Error: ${payment.error}
- Please contact support if you need assistance.
` : ''}

Total Amount: $${payment.amount.toFixed(2)}

---
This invoice was generated by Memorial Share Community
For support, contact: support@memorialshare.com
    `.trim();

    // Create and download the invoice
    const blob = new Blob([invoiceContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Invoice-${payment.paymentIntentId}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    toast({
      title: "Invoice Downloaded",
      description: "Your invoice has been downloaded successfully.",
    });
  };

  // Separate payments by status
  const successfulPayments = payments.filter(p => p.status === 'completed');
  const failedPayments = payments.filter(p => p.status === 'failed');
  const pendingPayments = payments.filter(p => p.status === 'pending');

  if (loading) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <main className="flex-1 space-y-4 p-4 md:space-y-8 md:p-8 bg-background">
          <div className="flex items-center justify-center h-64">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">Loading payment history...</span>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex-1 space-y-4 p-4 md:space-y-8 md:p-8 bg-background">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Share History</h1>
          <p className="text-muted-foreground">
            View all your share transactions and download invoices.
          </p>
        </div>

        {/* Payment Summary Cards */}
        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Successful Payments</CardTitle>
              <CheckCircle className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{successfulPayments.length}</div>
              <p className="text-xs text-muted-foreground">
                ${successfulPayments.reduce((sum, p) => sum + p.amount, 0).toFixed(2)} total
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Failed Payments</CardTitle>
              <XCircle className="h-4 w-4 text-red-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{failedPayments.length}</div>
              <p className="text-xs text-muted-foreground">
                ${failedPayments.reduce((sum, p) => sum + p.amount, 0).toFixed(2)} attempted
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Pending Payments</CardTitle>
              <AlertCircle className="h-4 w-4 text-yellow-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{pendingPayments.length}</div>
              <p className="text-xs text-muted-foreground">
                ${pendingPayments.reduce((sum, p) => sum + p.amount, 0).toFixed(2)} pending
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Payment History Tabs */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Receipt className="h-5 w-5 mr-2" />
              Payment History
            </CardTitle>
            <CardDescription>
              View all your share transactions organized by status.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {payments.length === 0 ? (
              <div className="text-center py-8">
                <CreditCard className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">No Payments Yet</h3>
                <p className="text-muted-foreground">
                  Your share history will appear here once you make contributions.
                </p>
              </div>
            ) : (
              <Tabs defaultValue="all" className="w-full">
                <TabsList className="grid w-full grid-cols-4">
                  <TabsTrigger value="all">All ({payments.length})</TabsTrigger>
                  <TabsTrigger value="successful">Successful ({successfulPayments.length})</TabsTrigger>
                  <TabsTrigger value="failed">Failed ({failedPayments.length})</TabsTrigger>
                  <TabsTrigger value="pending">Pending ({pendingPayments.length})</TabsTrigger>
                </TabsList>

                <TabsContent value="all" className="mt-4">
                  <PaymentTable payments={payments} generateInvoice={generateInvoice} formatDate={formatDate} getStatusBadge={getStatusBadge} getTypeBadge={getTypeBadge} />
                </TabsContent>

                <TabsContent value="successful" className="mt-4">
                  <PaymentTable payments={successfulPayments} generateInvoice={generateInvoice} formatDate={formatDate} getStatusBadge={getStatusBadge} getTypeBadge={getTypeBadge} />
                </TabsContent>

                <TabsContent value="failed" className="mt-4">
                  <PaymentTable payments={failedPayments} generateInvoice={generateInvoice} formatDate={formatDate} getStatusBadge={getStatusBadge} getTypeBadge={getTypeBadge} />
                </TabsContent>

                <TabsContent value="pending" className="mt-4">
                  <PaymentTable payments={pendingPayments} generateInvoice={generateInvoice} formatDate={formatDate} getStatusBadge={getStatusBadge} getTypeBadge={getTypeBadge} />
                </TabsContent>
              </Tabs>
            )}
          </CardContent>
        </Card>

        {/* Payment Information */}
        <Card>
          <CardHeader>
            <CardTitle>Payment Information</CardTitle>
            <CardDescription>
              Important information about how payments work in our community.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <h4 className="font-medium mb-2">Memorial Share Payments</h4>
                <ul className="text-sm text-muted-foreground space-y-1">
                  <li>• Each member pays $8 per share</li>
                  <li>• You pay for yourself + your dependents</li>
                  <li>• Payments are charged when a funeral occurs</li>
                  <li>• All payments go to the community wallet pool</li>
                </ul>
              </div>
              <div>
                <h4 className="font-medium mb-2">Payment Methods</h4>
                <ul className="text-sm text-muted-foreground space-y-1">
                  <li>• We accept all major credit cards</li>
                  <li>• Payments are processed securely via Stripe</li>
                  <li>• You can update your payment method anytime</li>
                  <li>• Invoices are provided for all transactions</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}

// Payment Table Component
function PaymentTable({ 
  payments, 
  generateInvoice, 
  formatDate, 
  getStatusBadge, 
  getTypeBadge 
}: {
  payments: PaymentRecord[];
  generateInvoice: (payment: PaymentRecord) => void;
  formatDate: (date: string) => string;
  getStatusBadge: (status: string) => JSX.Element;
  getTypeBadge: (type: string) => JSX.Element;
}) {
  if (payments.length === 0) {
    return (
      <div className="text-center py-8">
        <Receipt className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
        <h3 className="text-lg font-medium mb-2">No Payments Found</h3>
        <p className="text-muted-foreground">
          No payments match the selected filter.
        </p>
      </div>
    );
  }

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Date</TableHead>
          <TableHead>Type</TableHead>
          <TableHead>Amount</TableHead>
          <TableHead>Shares</TableHead>
          <TableHead>Status</TableHead>
          <TableHead>Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {payments.map((payment) => (
          <TableRow key={payment.id}>
            <TableCell>
              <div className="flex items-center space-x-2">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <span>{formatDate(payment.date)}</span>
              </div>
            </TableCell>
            <TableCell>{getTypeBadge(payment.type)}</TableCell>
            <TableCell>
              <div className="flex items-center space-x-1">
                <DollarSign className="h-4 w-4 text-muted-foreground" />
                <span className="font-medium">${payment.amount.toFixed(2)}</span>
              </div>
            </TableCell>
            <TableCell>
              {payment.shares} share{payment.shares !== 1 ? 's' : ''}
              {payment.amountPerShare && (
                <div className="text-xs text-muted-foreground">
                  @ ${payment.amountPerShare.toFixed(2)} each
                </div>
              )}
            </TableCell>
            <TableCell>{getStatusBadge(payment.status)}</TableCell>
            <TableCell>
              <Button
                variant="outline"
                size="sm"
                onClick={() => generateInvoice(payment)}
              >
                <Download className="h-4 w-4 mr-1" />
                Invoice
              </Button>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}